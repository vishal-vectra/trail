/**
* @FULLREVIEW HRY HRY 19-11-01
*/
// changes from main team lead
//===================================================================
// COPYRIGHT CADVision Engineers 2019
//===================================================================
//
// Usage notes:
//
//===================================================================
//  Nov 2019  Creation: Code generated by the CAA wizard  HARSHA
//===================================================================

#include <iostream>
#include <fstream>

using namespace std;

#include "VCTEAfrGeneralWkbAddIn.h"

//---------------------------------------------- ApplicationFrame
#include "CATCmdContainer.h"
#include "CATCommandHeader.h"
#include "CATCreateWorkshop.h"

//---------------------------------------------- SpecialAPI
#include "CATDataType.h"

#include"CATGetEnvValue.h"

#include "VCTGenericUtilities.h"
#include "VCTIXmlReader.h"
#include "VCTMacros.h"


const CATUnicodeString VCT_FOLDER_SEPARATOR = "\\";

const CATUnicodeString VCT_CMD_CONFIG_XML = "Commands_Exe_Config.xml";

const CATUnicodeString VCT_CMD_WORKBENCH = "GeneralWorkspace";


MacDeclareHeader(VCTGeneralWrksAddinHdr)


#include "TIE_CATIAfrGeneralWksAddin.h"
TIE_CATIAfrGeneralWksAddin(VCTEAfrGeneralWkbAddIn);


CATImplementClass(VCTEAfrGeneralWkbAddIn, DataExtension, CATBaseUnknown, VCTGenWksAddin);

//-----------------------------------------------------------------------------
// VCTEAfrGeneralWkbAddIn : constructor
//-----------------------------------------------------------------------------
VCTEAfrGeneralWkbAddIn::VCTEAfrGeneralWkbAddIn(): CATBaseUnknown()
{

  CATUnicodeString strOEMType,strSupplier,strDivision;
  VCTGenericUtilities::GetOEMSupplierInfoFromConfig(strOEMType, strSupplier, strDivision);


    VCTIXmlReader_var spCmdConfigXMLReader = NULL_var;
    VCTGenericUtilities::CreateXMLAndLoadXML(VCT_CMD_CONFIG_XML, spCmdConfigXMLReader);

    if(!!spCmdConfigXMLReader)
    {
        ReadCommandXMLConfig(spCmdConfigXMLReader,strOEMType,strSupplier,strDivision);
    }

    CreateNLSFile("VCTGeneralWrksAddinHdr");


}

//-----------------------------------------------------------------------------
// VCTEAfrGeneralWkbAddIn : destructor
//-----------------------------------------------------------------------------
VCTEAfrGeneralWkbAddIn::~VCTEAfrGeneralWkbAddIn()
{
}

//-----------------------------------------------------------------------------
// CreateCommands
//-----------------------------------------------------------------------------
void VCTEAfrGeneralWkbAddIn::CreateCommands()
{



    for(int i=1; i<=_pListOfStructXMLInfo.Size(); i++)
        {
          VCTGeneralWrksAddinHdr *pPocHdr = NULL;

           static VCTCommandInfo *pXMLinfo = NULL;

           pXMLinfo = (VCTCommandInfo*)_pListOfStructXMLInfo[i];

           if(pXMLinfo == NULL)
            continue;


            pPocHdr = new VCTGeneralWrksAddinHdr(pXMLinfo->GetHeaderID().ConvertToChar(), "VCTCommandExe",
                                          "VCTCommandExe", (void*)pXMLinfo);

              if(NULL != pPocHdr) pPocHdr->SetRepeatability(0);

            
        }

  

}

//-----------------------------------------------------------------------------
// CreateToolbars
//-----------------------------------------------------------------------------
CATCmdContainer* VCTEAfrGeneralWkbAddIn::CreateToolbars()
{
  if(_pListOfStructXMLInfo.Size() <=0)
      return NULL;

  // SUPPORT TOOLBAR
  NewAccess(CATCmdContainer, pVCTDftToolbar, VectraDraftingToolbar);
  AddToolbarView(pVCTDftToolbar, 1, Right);
  pVCTDftToolbar->SetName("Vectra Auto2D");

  // NewAccess(CATCmdStarter, pPocCommand, POCCommandInDft);
  // SetAccessCommand(pPocCommand, "VCTPOCCommandHdr");
  // SetAccessChild(pVCTDftToolbar, pPocCommand);

  CATListPV pListOfCmdStarter;
  for(int i=1; i<=_pListOfStructXMLInfo.Size(); i++)
        {
           VCTCommandInfo *pXMLinfo = NULL;

           pXMLinfo = (VCTCommandInfo*)_pListOfStructXMLInfo[i];

           if(pXMLinfo == NULL)
            continue;

          CATUnicodeString cmdName = pXMLinfo->GetCommand();

          CATCmdStarter *pCmdStarter = new CATCmdStarter(cmdName.ConvertToChar());
          if(pCmdStarter)
          {
            pCmdStarter->SetCommand(pXMLinfo->GetHeaderID().ConvertToChar());
            pListOfCmdStarter.Append(pCmdStarter);
          }
   
        }

for(int i=1; i<=pListOfCmdStarter.Size(); i++)
{
  CATCmdAccess *pCmdStarter = NULL;
  pCmdStarter = (CATCmdAccess*) pListOfCmdStarter[i];
  if(i==1 && pCmdStarter)
    pVCTDftToolbar->SetChild(pCmdStarter);
    else if(pCmdStarter && i>1)
    {
      CATCmdAccess *pCmdStarterParent = NULL;
      pCmdStarterParent = (CATCmdAccess*) pListOfCmdStarter[i-1];
      if(pCmdStarterParent)
          pCmdStarterParent->SetNext(pCmdStarter);
    }
}

  return pVCTDftToolbar;
}

// ReadgCommandConfig
//-----------------------------------------------------------------------------
void VCTEAfrGeneralWkbAddIn::ReadCommandXMLConfig(const VCTIXmlReader_var &ispXmlReader, 
                                              const CATUnicodeString &iStrOEMName, 
                                              const CATUnicodeString &iStrSupplier, 
                                              const CATUnicodeString &iStrDivision)
{
  VCTAssertRetVoid(NULL_var != ispXmlReader);
  
    ispXmlReader->ResetFilters();
  if(iStrSupplier != "") ispXmlReader->AddFilter(XML_NodeElement_Supplier, XML_AttributeElement_Name, iStrSupplier);
  if(iStrOEMName != "") ispXmlReader->AddFilter(XML_NodeElement_OEM, XML_AttributeElement_Name, iStrOEMName);
  if(iStrDivision != "") ispXmlReader->AddFilter(XML_NodeElement_Division, XML_AttributeElement_Name, iStrDivision);

  CATListOfCATUnicodeString strListOfWorkBench,
                            strListOfCommandHeaderID,
                            strListOfCommandName,
                            strListOfIconName,
                            strListOfExeName,
                            strListOfExePath;

  ispXmlReader->GetAttributes(XML_NodeElement_Command, XML_AttributeElement_Name, strListOfCommandName);
  ispXmlReader->GetAttributes(XML_NodeElement_Command, XML_AttributeElement_WorkBench, strListOfWorkBench);
  ispXmlReader->GetAttributes(XML_NodeElement_Command, XML_AttributeElement_HeaderID, strListOfCommandHeaderID);
  ispXmlReader->GetAttributes(XML_NodeElement_Command, XML_AttributeElement_IconName, strListOfIconName);
  ispXmlReader->GetAttributes(XML_NodeElement_Command, XML_AttributeElement_ExePath, strListOfExePath);

  
  for (size_t i = 1; i <= strListOfWorkBench.Size(); i++)
  {

    if(strListOfWorkBench[i].Compare(VCT_CMD_WORKBENCH) <= 0)
        continue;

    VCTCommandInfo *vctCommandInfo = new VCTCommandInfo();
    if(vctCommandInfo)
    {
      vctCommandInfo->SetWorkBench(strListOfWorkBench[i]);
      vctCommandInfo->SetHeaderID(strListOfCommandHeaderID[i]);
      vctCommandInfo->SetCommand(strListOfCommandName[i]);
      vctCommandInfo->SetIcon(strListOfIconName[i]);
      vctCommandInfo->SetExePath(strListOfExePath[i]);

      _pListOfStructXMLInfo.Append(vctCommandInfo);
    }
  }
 
}

//-----------------------------------------------------------------------------
// CreateXMLAndLoadXML
//-----------------------------------------------------------------------------
HRESULT VCTEAfrGeneralWkbAddIn::CreateNLSFile(const CATUnicodeString &iStrNLSFileName)
{
  HRESULT hr = S_OK;

  if(_pListOfStructXMLInfo.Size() > 0)
  {

  char * pReffilesPath = NULL;
  CATLibStatus libStatus = CATGetEnvValue("CATMsgCatalogPath", &pReffilesPath);
  if(NULL != pReffilesPath)
  {
    CATListOfCATUnicodeString strListOfFilePath;
    if(libStatus == CATLibSuccess)
    {
      CATUnicodeChar strDelimiter = ';';
      CATUnicodeString strFilePath = pReffilesPath;
      VCTGenericUtilities::ConvertStringToList(strFilePath, strDelimiter, strListOfFilePath);
    }

    CATUnicodeString nlsFileFoundPath, rscFilePathFound;
    for(int fileIdx = 1; fileIdx <= strListOfFilePath.Size(); fileIdx++)
    {
      CATUnicodeString strNLSFilePath = strListOfFilePath[fileIdx],
                       strRscFilePath = strListOfFilePath[fileIdx];

      strNLSFilePath = strNLSFilePath + VCT_FOLDER_SEPARATOR + iStrNLSFileName + ".CATNls";
      strRscFilePath = strRscFilePath + VCT_FOLDER_SEPARATOR + iStrNLSFileName + ".CATRsc";


      CATLibStatus isNLSFileExist = CATFileAccess(strNLSFilePath.ConvertToChar(), F_OK);
      CATLibStatus isRscFileExist = CATFileAccess(strRscFilePath.ConvertToChar(), F_OK);

      if (isNLSFileExist != CATLibSuccess && isRscFileExist != CATLibSuccess )
        continue;

        if (isNLSFileExist == CATLibSuccess && isRscFileExist == CATLibSuccess)
              {
                nlsFileFoundPath = strNLSFilePath;
                rscFilePathFound = strRscFilePath;
                break;
              }
      
    }
    
    ofstream nlsFileToWrite, rscFileToWrite;
    nlsFileToWrite.open(nlsFileFoundPath.ConvertToChar(),ios::out | ios::trunc);
    rscFileToWrite.open(rscFilePathFound.ConvertToChar(),ios::out | ios::trunc);



        for(int i=1; i<=_pListOfStructXMLInfo.Size(); i++)
        {
           VCTCommandInfo *pXMLinfo = NULL;

           pXMLinfo = (VCTCommandInfo*)_pListOfStructXMLInfo[i];

           if(pXMLinfo == NULL)
            continue;


            CATUnicodeString headerID = pXMLinfo->GetHeaderID();
            CATUnicodeString cmdName = pXMLinfo->GetCommand();
            CATUnicodeString iconName = pXMLinfo->GetIcon();



          nlsFileToWrite <<"\n";
          nlsFileToWrite <<iStrNLSFileName <<"." << headerID << "." <<"Title = \"" << cmdName <<"\";";
          
          nlsFileToWrite <<"\n";
          nlsFileToWrite <<iStrNLSFileName <<"." <<headerID << "." <<"ShortHelp = \"" <<cmdName <<"\";";

          nlsFileToWrite <<"\n";
          nlsFileToWrite <<iStrNLSFileName <<"." <<headerID << "." <<"LongHelp = \"" <<"Launches the Exe\";";

          rscFileToWrite <<"\n";
          rscFileToWrite <<iStrNLSFileName <<"." <<headerID << ".Icon.Normal = \""<<iconName <<"\";";

          
        }

        nlsFileToWrite.close();
        rscFileToWrite.close();



    free(pReffilesPath);
    pReffilesPath = NULL;
  }
  }
  

  return hr;
}
